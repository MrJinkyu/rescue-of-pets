generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())

  username String @unique
  email String @unique
  password String
  avatar String?
  phone String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sms_token SMSToken[]
  temporary_protections TemporaryProtection[]
  reports Report[]
  storys Story[]
  comments Comment[]
  likes Like[]
  chat_rooms ChatRoom[]
  messages Message[]
}

model SMSToken{
  id Int @id @default(autoincrement())
  token String @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model TemporaryProtection{
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive Boolean
  gender String
  species String
  detail String?
  description String?
  rescuePlace String
  area String
  photo String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Report{
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive Boolean
  area String
  missingPlace String
  species String
  detail String?
  gender String
  characteristics String
  description String?
  photo String
  name String
  age String
  weight String
  color String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Story{
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  contents String
  photo String?
  comments Comment[]
  likes Like[]
  species String
  area String
  category String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Comment{
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payload String

  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Like{
  @@id(name:"id",[userId,storyId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model ChatRoom{
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
  messages Message[]
}

model Message{
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payload String

  room ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}